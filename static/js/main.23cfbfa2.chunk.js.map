{"version":3,"sources":["components/PageNavLink.tsx","components/NavBar.tsx","pages/HomePage.tsx","api.ts","components/PersonLink.tsx","components/PeopleTable.tsx","components/Loader/Loader.tsx","pages/PeopleTablePage.tsx","pages/NotFoundPage.tsx","App.tsx","index.tsx"],"names":["PageNavLink","memo","to","text","className","isActive","classNames","NavBar","role","HomePage","API_URL","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","PersonLink","person","name","slug","sex","headers","id","title","PeopleTable","people","useParams","map","header","born","died","father","fatherName","mother","motherName","Loader","PeopleTablePage","useState","setPeople","isLoading","setIsLoading","errorMessage","setErrorMessage","isPeopleLoaded","setIsPeopleLoaded","loadPeople","peopleFromServer","useEffect","hasNoPeople","length","NotFoundPage","App","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.23cfbfa2.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { memo } from 'react';\nimport { NavLink } from 'react-router-dom';\n\ntype Props = {\n  to: string,\n  text: string,\n};\n\nexport const PageNavLink: React.FC<Props> = memo(({ to, text }) => (\n  <NavLink\n    className={({ isActive }) => classNames('navbar-item', {\n      'has-background-grey-lighter': isActive,\n    })}\n    to={to}\n  >\n    {text}\n  </NavLink>\n));\n","import { memo } from 'react';\nimport { PageNavLink } from './PageNavLink';\n\nexport const NavBar: React.FC = memo(() => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <PageNavLink to=\"/\" text=\"Home\" />\n          <PageNavLink to=\"people\" text=\"People\" />\n        </div>\n      </div>\n    </nav>\n  );\n});\n","import React, { memo } from 'react';\n\nexport const HomePage: React.FC = memo(() => (\n  <h1 className=\"title\">Home Page</h1>\n));\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import classNames from 'classnames';\nimport { memo } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../types/Person';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = memo(({ person }) => {\n  const {\n    name,\n    slug,\n    sex,\n  } = person;\n\n  return (\n    <Link\n      className={classNames({\n        'has-text-danger': sex === 'f',\n      })}\n      to={slug}\n    >\n      {name}\n    </Link>\n  );\n});\n","import { memo } from 'react';\nimport classNames from 'classnames';\nimport { useParams } from 'react-router-dom';\nimport { Person } from '../types/Person';\nimport { PersonLink } from './PersonLink';\n\ninterface Props {\n  people: Person[],\n}\n\nconst headers = [\n  { id: 1, title: 'Name' },\n  { id: 2, title: 'Sex' },\n  { id: 3, title: 'Born' },\n  { id: 4, title: 'Died' },\n  { id: 5, title: 'Mother' },\n  { id: 6, title: 'Father' },\n];\n\nexport const PeopleTable: React.FC<Props> = memo(({ people }) => {\n  const { slug } = useParams();\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          {headers.map(header => <th key={header.id}>{header.title}</th>)}\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <tr\n            data-cy=\"person\"\n            key={person.slug}\n            className={(classNames({\n              'has-background-warning': person.slug === slug,\n            }))}\n          >\n            <td>\n              <PersonLink person={person} />\n            </td>\n\n            <td>{person.sex}</td>\n            <td>{person.born}</td>\n            <td>{person.died}</td>\n            <td>\n              {person.father\n                ? <PersonLink person={person.father} />\n                : person.fatherName || '-'}\n            </td>\n            <td>\n              {person.mother\n                ? <PersonLink person={person.mother} />\n                : person.motherName || '-'}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n});\n","import React, { memo } from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = memo(() => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n));\n","import React, { memo, useEffect, useState } from 'react';\nimport { Person } from '../types';\nimport { getPeople } from '../api';\nimport { PeopleTable } from '../components/PeopleTable';\nimport { Loader } from '../components/Loader';\n\nexport const PeopleTablePage: React.FC = memo(() => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [errorMessage, setErrorMessage] = useState(false);\n  const [isPeopleLoaded, setIsPeopleLoaded] = useState(false);\n\n  const loadPeople = async () => {\n    setIsLoading(true);\n\n    try {\n      const peopleFromServer = await getPeople();\n\n      setPeople(peopleFromServer);\n      setIsPeopleLoaded(true);\n    } catch {\n      setErrorMessage(true);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    loadPeople();\n  }, []);\n\n  const hasNoPeople = !people.length && isPeopleLoaded;\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {isLoading && <Loader />}\n\n          {errorMessage\n            && (\n              <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                Something went wrong\n              </p>\n            )}\n\n          {hasNoPeople && (\n            <p data-cy=\"noPeopleMessage\">\n              There are no people on the server\n            </p>\n          )}\n\n          {people.length !== 0 && <PeopleTable people={people} />}\n        </div>\n      </div>\n    </>\n  );\n});\n","import React, { memo } from 'react';\n\nexport const NotFoundPage: React.FC = memo(() => (\n  <h1 className=\"title\">Page not found</h1>\n));\n","import React from 'react';\nimport { Navigate, Route, Routes } from 'react-router-dom';\n\nimport './App.scss';\nimport { NavBar } from './components/NavBar';\nimport { HomePage } from './pages/HomePage';\nimport { PeopleTablePage } from './pages/PeopleTablePage';\nimport { NotFoundPage } from './pages/NotFoundPage';\n\nexport const App: React.FC = () => (\n  <div data-cy=\"app\">\n    <NavBar />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Routes>\n          <Route path=\"/\" element={<HomePage />} />\n          <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n\n          <Route path=\"people\">\n            <Route index element={<PeopleTablePage />} />\n            <Route path=\":slug\" element={<PeopleTablePage />} />\n          </Route>\n\n          <Route path=\"*\" element={<NotFoundPage />} />\n        </Routes>\n      </div>\n    </main>\n  </div>\n);\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}